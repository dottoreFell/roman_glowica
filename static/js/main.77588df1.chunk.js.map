{"version":3,"sources":["NumberOfSlots.js","enums.js","ScoreCalculatorMock.js","GameManager.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NumberOfSlots","Raider","maxSlots","Speeder","Tank","First","minSlots","Second","Bikes","RAIDER","SPEEDER","TANK","Modules","JUMP","SPEED","Tracks","FIRST","SECOND","Obstacles","DITCH","CURVE","ScoreCalculator","_ref","gameConfig","romansBike","romansModules","track","obstacles","opponentModules","react_default","a","createElement","className","GameManager","state","genSetupBttns","availableOptions","gameStateArrayName","Object","values","map","optionType","id","key","onClick","_this","addSlot","disabled","shouldButtonBeDisabled","button","length","gameStateArray","reduce","totalLength","genStateBttns","gameStateArrayContent","option","removeSlot","props","setScoreCalcVisiblity","gameStateArrayCopy","toConsumableArray","push","setState","objectSpread","defineProperty","newRomansModules","newObstacles","splice","startGame","passedGameConfig","setGameConfig","resetGame","clearGameConfig","keys","item","_this2","this","_this$state$gameConfi","React","PureComponent","App","isScoreCalculatorVisible","gameConfigReceived","src_GameManager","ScoreCalculatorMock","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.77588df1.chunk.js","sourcesContent":["const NumberOfSlots = {Raider:{maxSlots:3}, Speeder: {maxSlots: 1}, Tank: {maxSlots: 2}, First: {maxSlots: 3, minSlots: 0}, Second: {maxSlots:10, minSlots: 5}}\r\n\r\nmodule.exports = {\r\n    NumberOfSlots\r\n}","const Bikes = { RAIDER: \"Raider\", SPEEDER: \"Speeder\", TANK: \"Tank\" }\r\nconst Modules = { JUMP: \"Jump\", SPEED: \"Speed\" }\r\nconst Tracks = { FIRST: \"First\", SECOND: \"Second\" }\r\nconst Obstacles = { DITCH: \"Ditch\", CURVE: \"Curve\" }\r\n\r\nmodule.exports = {\r\n    Bikes,\r\n    Modules,\r\n    Tracks,\r\n    Obstacles\r\n}","import React from 'react';\r\n\r\nconst ScoreCalculator = ({ gameConfig }) => {\r\n    const { romansBike, romansModules, track, obstacles, opponentModules } = gameConfig;\r\n    return (\r\n        <div className=\"center\">\r\n            <ul>\r\n                <h2>And the winner is:</h2>\r\n                <li>Roman's Bike: {romansBike}</li>\r\n                <li>Roman's Modules: {romansModules}</li>\r\n                <li>Track: {track}</li>\r\n                <li>Obstacles: {obstacles}</li>\r\n                <li>Opponent's modules: {opponentModules}</li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScoreCalculator;","import React from 'react';\r\nimport { Bikes, Modules, Tracks, Obstacles } from './enums';\r\nimport { NumberOfSlots } from './NumberOfSlots';\r\n\r\nclass GameManager extends React.PureComponent {\r\n  state = {\r\n    gameConfig: {\r\n      romansBike: [],\r\n      romansModules: [],\r\n      track: [],\r\n      obstacles: [],\r\n      opponentModules: []\r\n    }\r\n  }\r\n\r\n  genSetupBttns = (availableOptions, gameStateArrayName) => {\r\n    return Object.values(availableOptions).map((optionType, id) => (<button key={id} onClick={() => this.addSlot(gameStateArrayName, optionType)} disabled={this.shouldButtonBeDisabled(gameStateArrayName)}>{optionType}</button>))\r\n  }\r\n\r\n  shouldButtonBeDisabled = (button) => {\r\n\r\n    switch (button) {\r\n      case 'romansBike':\r\n        return (this.state.gameConfig.romansBike.length > 0);\r\n\r\n      case 'romansModules':\r\n        return (this.state.gameConfig.romansBike.length === 0\r\n          || this.state.gameConfig.romansModules.length === NumberOfSlots[this.state.gameConfig.romansBike[0]].maxSlots)\r\n\r\n      case 'track':\r\n        return (this.state.gameConfig.track.length > 0);\r\n\r\n      case 'obstacles':\r\n        return (this.state.gameConfig.track.length === 0\r\n          || this.state.gameConfig.obstacles.length === NumberOfSlots[this.state.gameConfig.track[0]].maxSlots)\r\n\r\n      case 'opponentModules':\r\n        return (this.state.gameConfig.opponentModules.length > 4);\r\n\r\n      case 'start':\r\n        return (this.state.gameConfig.romansBike.length === 0 || this.state.gameConfig.track.length === 0 || this.state.gameConfig.obstacles.length < NumberOfSlots[this.state.gameConfig.track[0]].minSlots);\r\n\r\n      case 'reset':\r\n        return (Object.values(this.state.gameConfig).map(gameStateArray => gameStateArray.length).reduce((totalLength, gameStateArray) => totalLength + gameStateArray) === 0);\r\n\r\n\r\n      default: return true\r\n    }\r\n  }\r\n\r\n  genStateBttns = (gameStateArrayContent, gameStateArrayName) => {\r\n    return gameStateArrayContent.map((option, id) => (<button key={id} onClick={() => this.removeSlot(gameStateArrayName, id)}>{option}</button>))\r\n  }\r\n\r\n  addSlot = (gameStateArrayName, optionType) => {\r\n    this.props.setScoreCalcVisiblity(false);\r\n    const gameStateArrayCopy = [...this.state.gameConfig[gameStateArrayName]]\r\n    gameStateArrayCopy.push(optionType);\r\n    this.setState({\r\n      gameConfig: { ...this.state.gameConfig, [gameStateArrayName]: gameStateArrayCopy }\r\n    })\r\n  }\r\n\r\n  removeSlot = (gameStateArrayName, id) => {\r\n    this.props.setScoreCalcVisiblity(false);\r\n    const newRomansModules = gameStateArrayName === 'romansBike' ? [] : [...this.state.gameConfig.romansModules];\r\n    const newObstacles = gameStateArrayName === 'track' ? [] : [...this.state.gameConfig.obstacles];\r\n\r\n    const gameStateArrayCopy = [...this.state.gameConfig[gameStateArrayName]]\r\n    gameStateArrayCopy.splice(id, 1);\r\n    this.setState({\r\n      gameConfig: { ...this.state.gameConfig, obstacles: newObstacles, romansModules: newRomansModules, [gameStateArrayName]: gameStateArrayCopy }\r\n    })\r\n  }\r\n\r\n  startGame = (passedGameConfig) => {\r\n    this.props.setScoreCalcVisiblity(true);\r\n    this.props.setGameConfig(passedGameConfig);\r\n  }\r\n\r\n  resetGame = () => {\r\n    this.props.setScoreCalcVisiblity(false);\r\n    const clearGameConfig = { ...this.state.gameConfig };\r\n    Object.keys(clearGameConfig).map(item => clearGameConfig[item] = []);\r\n    this.setState({\r\n      gameConfig: { ...clearGameConfig }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { romansBike, romansModules, track, obstacles, opponentModules } = this.state.gameConfig;\r\n    return (\r\n      <div>\r\n        <div id=\"GameManagingButtons\">\r\n          <button onClick={() => this.startGame(this.state.gameConfig)} disabled={this.shouldButtonBeDisabled('start')}>Start Game</button>\r\n          <button onClick={this.resetGame} disabled={this.shouldButtonBeDisabled('reset')}>Reset Game</button>\r\n        </div>\r\n        <div id=\"GameConfigButtons\">\r\n          <ul>\r\n            <li>Select Bike: {this.genSetupBttns(Bikes, 'romansBike')}</li>\r\n            <li>Select Roman's Modules: {this.genSetupBttns(Modules, 'romansModules')}</li>\r\n            <li>Select Track: {this.genSetupBttns(Tracks, 'track')}</li>\r\n            <li>Select Obstacles: {this.genSetupBttns(Obstacles, 'obstacles')}</li>\r\n            <li>Select Opponent's Modules: {this.genSetupBttns(Modules, 'opponentModules')}</li>\r\n          </ul>\r\n        </div>\r\n        <div id=\"CurrentGameConfig\">\r\n          <ul>\r\n            <li>Roman's Bike: {this.genStateBttns(romansBike, 'romansBike')}</li>\r\n            <li>Roman's Modules: {this.genStateBttns(romansModules, 'romansModules')}</li>\r\n            <li>Track: {this.genStateBttns(track, 'track')}</li>\r\n            <li>Obstacles: {this.genStateBttns(obstacles, 'obstacles')}</li>\r\n            <li>Opponent's Modules: {this.genStateBttns(opponentModules, 'opponentModules')}</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default GameManager;","import './App.css';\nimport React from 'react';\nimport ScoreCalculator from './ScoreCalculatorMock';\nimport GameManager from './GameManager';\n\nclass App extends React.PureComponent {\n  state = {\n    gameConfig: {\n      romansBike: '',\n      romansModules: [],\n      track: '',\n      obstacles: [],\n      opponentModules: []\n    },\n    isScoreCalculatorVisible: false\n  }\n\n  setScoreCalcVisiblity = isScoreCalculatorVisible => {\n    this.setState({\n      isScoreCalculatorVisible\n    })\n  }\n\n  setGameConfig = gameConfigReceived => {\n    this.setState({\n      gameConfig: {...gameConfigReceived}\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <GameManager setGameConfig={this.setGameConfig} setScoreCalcVisiblity={this.setScoreCalcVisiblity}/>\n        {this.state.isScoreCalculatorVisible && <ScoreCalculator gameConfig={this.state.gameConfig} />}\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}